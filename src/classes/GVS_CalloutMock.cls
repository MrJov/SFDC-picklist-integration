global class GVS_CalloutMock implements WebServiceMock {
  // public Integer statusCode = 200;
  // public String response = '{}';
  // public String contentType = 'application/json';

  // public CalloutMock(Object element){
  //   this.responseElement = element;
  // }

  // public CalloutMock(Integer status, String resp, String content){
  //   this.statusCode = status;
  //   this.response = resp;
  //   this.contentType = content;
  // }

  // // Implement this interface method
  // global HTTPResponse respond(HTTPRequest req) {
  //   // Optionally, only send a mock response for a specific endpoint
  //   // and method.
  //   // System.assertEquals('http://example.com/example/test', req.getEndpoint());
  //   // System.assertEquals('GET', req.getMethod());
    
  //   // Create a fake response
  //   HttpResponse res = new HttpResponse();
  //   res.setHeader('Content-Type', contentType);
  //   res.setBody(response);
  //   res.setStatusCode(statusCode);
  //   return res;
  // }

  global void doInvoke(Object stub, Object request, Map<String, Object> response,String endpoint,String soapAction,String requestName,String responseNS,String responseName,String responseType) {

    // Create response element from the autogenerated class.
    // Populate response element.
    // Add response element to the response parameter, as follows:
    // response.put('response_x', responseElement); 

    // test for the type of the response, OP was just doing readMetaData()
    if(request instanceof GVS_MetadataUtils.readMetadata_element){
      GVS_MetadataUtils.readMetadata_element requestReadMetadata_element = (GVS_MetadataUtils.readMetadata_element) request;
      // This allows you to generalize the mock response by type of metadata read
      if (requestReadMetadata_element.type_x == 'GlobalValueSet') { 
        GVS_MetadataUtils.readGlobalValueSetResponse_element mockRes = new GVS_MetadataUtils.readGlobalValueSetResponse_element();
        mockRes.result = new GVS_MetadataUtils.ReadGlobalValueSetResult();
        mockRes.result.records = createGlobalValueSets();
        response.put('response_x', mockRes);
      }
      else if (requestReadMetadata_element.type_x == 'RecordType') { 
        GVS_MetadataUtils.readRecordTypeResponse_element mockRes = new GVS_MetadataUtils.readRecordTypeResponse_element();
        mockRes.result = new GVS_MetadataUtils.ReadRecordTypeResult();
        mockRes.result.records = createRecordTypes();
        response.put('response_x', mockRes);
      }
      else if (requestReadMetadata_element.type_x == 'CustomField') { 
        GVS_MetadataUtils.readCustomFieldResponse_element mockRes = new GVS_MetadataUtils.readCustomFieldResponse_element();
        mockRes.result = new GVS_MetadataUtils.ReadCustomFieldResult();
        mockRes.result.records = createCustomFields();
        response.put('response_x', mockRes);
      }
    } else if (request instanceof GVS_MetadataUtils.updateMetadata_element) {
      // mock the updateMetadata() response 
      GVS_MetadataUtils.updateMetadata_element requestUpdateMetadata_element = (GVS_MetadataUtils.updateMetadata_element) request;
      GVS_MetadataUtils.updateMetadataResponse_element mockRes = new GVS_MetadataUtils.updateMetadataResponse_element();
      List<GVS_MetadataUtils.SaveResult> saveResults = new List<GVS_MetadataUtils.SaveResult>();
      for(GVS_MetadataUtils.metadata metadata : requestUpdateMetadata_element.metadata){
        GVS_MetadataUtils.SaveResult sr = new GVS_MetadataUtils.SaveResult();
        sr.fullName = metadata.fullName;
        sr.success = true;
        saveResults.add(sr);
      }
      mockRes.result = saveResults;
      response.put('response_x', mockRes);
    } else if (request instanceof GVS_MetadataUtils.createMetadata_element) {
      // mock the updateMetadata() response 
      GVS_MetadataUtils.createMetadata_element requestUpdateMetadata_element = (GVS_MetadataUtils.createMetadata_element) request;
      GVS_MetadataUtils.createMetadataResponse_element mockRes = new GVS_MetadataUtils.createMetadataResponse_element();
      List<GVS_MetadataUtils.SaveResult> saveResults = new List<GVS_MetadataUtils.SaveResult>();
      for(GVS_MetadataUtils.metadata metadata : requestUpdateMetadata_element.metadata){
        GVS_MetadataUtils.SaveResult sr = new GVS_MetadataUtils.SaveResult();
        sr.fullName = metadata.fullName;
        sr.success = true;
        saveResults.add(sr);
      }
      mockRes.result = saveResults;
      response.put('response_x', mockRes);
    }
   // else if (...) any other response you have to mock
   return;
  }

  private static GVS_MetadataUtils.GlobalValueSet[] createGlobalValueSets(){
    GVS_MetadataUtils.GlobalValueSet[] globalValueSets = new GVS_MetadataUtils.GlobalValueSet[]{};

    GVS_MetadataUtils.GlobalValueSet gvs = new GVS_MetadataUtils.GlobalValueSet();
    gvs.fullName = 'MarvelGroups';
    gvs.customValue = createCustomValues(new String[]{'Avengers', 'X-Men', 'Defenders'});
    globalValueSets.add(gvs);

    GVS_MetadataUtils.GlobalValueSet gvs2 = new GVS_MetadataUtils.GlobalValueSet();
    gvs2.fullName = 'Avengers';
    gvs2.customValue = createCustomValues(new String[]{'Iron Man', 'Capitan America', 'Hulk'});
    globalValueSets.add(gvs2);

    GVS_MetadataUtils.GlobalValueSet gvs3 = new GVS_MetadataUtils.GlobalValueSet();
    gvs3.fullName = 'X-Men';
    gvs3.customValue = createCustomValues(new String[]{'Fenice', 'Wolverine', 'Tempesta'});
    globalValueSets.add(gvs3);

    return globalValueSets;
  }

  private static GVS_MetadataUtils.CustomValue[] createCustomValues(String[] names){
    GVS_MetadataUtils.CustomValue[] customValues = new GVS_MetadataUtils.CustomValue[]{};

    for(String name : names){
      GVS_MetadataUtils.CustomValue cv = new GVS_MetadataUtils.CustomValue();
      cv.fullName = name;
      cv.default_x = false;
      cv.description = name;
      cv.isActive = true;
      cv.label = name;
      customValues.add(cv);
    }

    return customValues;
  }

  private static GVS_MetadataUtils.RecordType[] createRecordTypes(){
    GVS_MetadataUtils.RecordType[] recordTypes = new GVS_MetadataUtils.RecordType[]{};

    GVS_MetadataUtils.RecordType rt = new GVS_MetadataUtils.RecordType();
    rt.fullName = 'Account.Hero';
    rt.active = true;
    rt.description = 'Marvel heroes';
    rt.label = 'Hero';
    rt.picklistValues = createPicklistValues(new Map<String, list<String>>{ 'Group__c' => new list<String> {'Avengers', 'X-Men', 'Defenders'} });
    recordTypes.add(rt);

    GVS_MetadataUtils.RecordType rt2 = new GVS_MetadataUtils.RecordType();
    rt2.fullName = 'Account.Villain';
    rt2.active = true;
    rt2.description = 'Marvel Villains';
    rt2.label = 'Villain';
    rt2.picklistValues = createPicklistValues(new Map<String, list<String>>{ 'Character__c' => new list<String> {'Iron Man', 'Hulk', 'Black Widow'} });
    recordTypes.add(rt2);

    return recordTypes;
  }

  private static GVS_MetadataUtils.RecordTypePicklistValue[] createPicklistValues(Map<String, List<String>> picklistsRecordTypes){
    GVS_MetadataUtils.RecordTypePicklistValue[] recordTypePicklistValues = new GVS_MetadataUtils.RecordTypePicklistValue[]{};

    for(String picklist : picklistsRecordTypes.keySet()){
      GVS_MetadataUtils.RecordTypePicklistValue rtpv = new GVS_MetadataUtils.RecordTypePicklistValue();
      rtpv.picklist = picklist;
      rtpv.values = createPicklistValues(picklistsRecordTypes.get(picklist));
      recordTypePicklistValues.add(rtpv);
    }

    return recordTypePicklistValues;
  }

  private static GVS_MetadataUtils.PicklistValue[] createPicklistValues(String[] values){
    GVS_MetadataUtils.PicklistValue[] picklistValues = new GVS_MetadataUtils.PicklistValue[]{};

    for(String value : values){
      GVS_MetadataUtils.PicklistValue rtpv = new GVS_MetadataUtils.PicklistValue();
      rtpv.fullName = value;
      rtpv.isActive = true;
      rtpv.description = value;
      picklistValues.add(rtpv);
    }

    return picklistValues;
  }

  private static GVS_MetadataUtils.CustomField[] createCustomFields(){
    GVS_MetadataUtils.CustomField[] fields = new GVS_MetadataUtils.CustomField[]{};

    GVS_MetadataUtils.CustomField field = new GVS_MetadataUtils.CustomField();
    field.fullName = 'Account.Group__c';
    field.valueSet = createValueSet();
    fields.add(field);

    GVS_MetadataUtils.CustomField field2 = new GVS_MetadataUtils.CustomField();
    field2.fullName = 'Account.Character__c';
    field2.valueSet = createValueSet();
    fields.add(field2);

    return fields;
  }

  private static GVS_MetadataUtils.ValueSet createValueSet(){
    GVS_MetadataUtils.ValueSet valueSet = new GVS_MetadataUtils.ValueSet();
    
    valueSet.controllingField = 'Group__c';
    valueSet.valueSetName = 'MarvelGroups';
    valueSet.valueSettings = createValueSettings();

    return valueSet;
  }

  private static GVS_MetadataUtils.ValueSettings[] createValueSettings(){
    GVS_MetadataUtils.ValueSettings[] valueSettings = new GVS_MetadataUtils.ValueSettings[]{};

    GVS_MetadataUtils.ValueSettings valueSetting = new GVS_MetadataUtils.ValueSettings();
    valueSetting.controllingFieldValue = new String[]{'Uno', 'Due'};
    valueSetting.valueName = 'Tre';
    valueSettings.add(valueSetting);

    GVS_MetadataUtils.ValueSettings valueSetting2 = new GVS_MetadataUtils.ValueSettings();
    valueSetting2.controllingFieldValue = new String[]{'Quattro', 'Cinque'};
    valueSetting2.valueName = 'Sei';
    valueSettings.add(valueSetting2);

    return valueSettings;
  }
}